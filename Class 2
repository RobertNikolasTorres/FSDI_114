{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c9469d4-79bf-4602-9be7-4f96a2cc3794",
   "metadata": {},
   "source": [
    "# stacks\n",
    "A stack is an ordered collection where items are added and removed from the same end, commonly referred to as the top.\n",
    "\n",
    "The ordering principle is represented by the acronym: LIFO which is \"last in first out\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "da7ffe98-f6a7-45a8-a627-1ace19f9607c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simplified implementation of Stack (relying heavily on built-ins)\n",
    "\n",
    "class Stack:\n",
    "    def __init__(self):\n",
    "        self.items = []\n",
    "\n",
    "    def push(self, value):\n",
    "        self.items.append(value)\n",
    "\n",
    "    def pop(self):\n",
    "        return self.items.pop()\n",
    "\n",
    "# nice to have methods:\n",
    "    def peek(self):\n",
    "        return self.items[len(self.items)-1]\n",
    "\n",
    "    def is_empty(self):\n",
    "        return self.items ==[]\n",
    "\n",
    "    def size(self):\n",
    "        return len(self.items)\n",
    "\n",
    "# Shift + enter to register this cell memory"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f4e7d5a-dc47-4cc9-a373-0a7375ada07b",
   "metadata": {},
   "source": [
    "# Problem 1\n",
    "Create a function that uses the 'Stack' class above to invert a string.\n",
    "\n",
    "# Criteria\n",
    "\n",
    "Your function, invert_str should recieve a string as a parameter and use the Stack class shown above to return an inverted copy of the string.\n",
    "\n",
    "x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "29b445f5-7054-42c7-8176-d00711185da3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a2bf2b2f-dce4-4fa7-ba23-7fd2d93c870a",
   "metadata": {},
   "source": [
    "```\n",
    "+---------------------+   +-----------------+   +-----------+\n",
    "|      Assessment     |   |     Assembly    |   |   Action  |\n",
    "|                     |   |                 |   |           |\n",
    "+---------------------+   +-----------------+   +-----------+\n",
    "define invert_str with parameter mystring of type string:\n",
    "    stack = new instance of stack class \n",
    "    for each character in mystring:\n",
    "        stack.push(character)\n",
    "    output_str = \"\"\n",
    "    while the stack is not empty:\n",
    "        output_str\n",
    "```\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c493923d-8a97-487a-a9d5-45c6e9ca73b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def invert_str(mystring):\n",
    "    stack = Stack()\n",
    "    for char in mystring:\n",
    "        stack.push(char)\n",
    "    output_str =\"\"\n",
    "\n",
    "    while not stack.is_empty():\n",
    "        output_str += stack.pop()\n",
    "\n",
    "    return output_str\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "06bd05a7-0d7b-4a7b-858e-78663f1be3fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ocin'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "invert_str(\"nico\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0334f7ee-dbd3-4521-8b25-1235ea34a4d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# From scratch implementation of Stack\n",
    "\n",
    "class StackII:\n",
    "    class __Node:\n",
    "        def __init__(self, data):\n",
    "            self.data = data\n",
    "            self.below = None\n",
    "\n",
    "    def __init__(self):\n",
    "        self.top = None\n",
    "\n",
    "    def push(self, datum):\n",
    "        new_node = self.__Node(datum)\n",
    "        if not self.top:\n",
    "            self.top = new_node\n",
    "        else:\n",
    "            new_node.below = self.top\n",
    "            self.top = new_node\n",
    "\n",
    "    def pop(self):\n",
    "        if self.top :\n",
    "            datum = self.top.data\n",
    "            self.top = self.top.below\n",
    "            return datum\n",
    "        raise IndexError(\"Stack is empty\")\n",
    "\n",
    "#Nice to have methods\n",
    "    def peek(self):\n",
    "        if self.top:\n",
    "            return self.top.data\n",
    "        raise IndexError(\"Stack is empty\")\n",
    "\n",
    "    def is_empty(self):\n",
    "        return self.top == None\n",
    "\n",
    "    def size(self):\n",
    "        #Traversal recipe!\n",
    "        count = 0\n",
    "        if self.top:\n",
    "            current = self.top\n",
    "            while current:\n",
    "                count += 1\n",
    "                current = current.below\n",
    "        return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "87db617c-0e2c-44ad-94ad-cd672d162578",
   "metadata": {},
   "outputs": [],
   "source": [
    "def invert_str(mystring):\n",
    "    stack = StackII()\n",
    "    for char in mystring:\n",
    "        stack.push(char)\n",
    "    out = \"\"\n",
    "    while not stack.is_empty():\n",
    "        out += stack.pop()\n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e6f2acb0-a8c3-4818-a31a-a1bbf602b5c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ocin'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "invert_str(\"nico\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c054b20-6c04-4e47-8147-3f6597d95b89",
   "metadata": {},
   "source": [
    "# Where to go from here?\n",
    "\n",
    "1. I recommend you try to implement StackII on your own without reading the code above (you can totally cheat as needed -- I mean look at the source code.\n",
    "2. Try to diagram what the StackII class is doing in the invert_str function above (a flowchart is ideal).\n",
    "\n",
    "# optional\n",
    "1. Create a drawing of the StackII class, representing its embedded Node class and how the push and pop operations work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c5332752-aa61-495a-bb79-40c65340ce47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# From scratch implementation of Stack\n",
    "\n",
    "class StackII:\n",
    "    class __Node:\n",
    "        def __init__(self, data):\n",
    "            self.data = data\n",
    "            self.below = None\n",
    "\n",
    "    def __init__(self):\n",
    "        self.top = None\n",
    "\n",
    "    def push(self, datum):\n",
    "        new_node = self.__Node(datum)\n",
    "        if not self.top:\n",
    "            self.top = new_node\n",
    "        else:\n",
    "            new_node.below = self.top\n",
    "            self.top = new_node\n",
    "\n",
    "    def pop(self):\n",
    "        if self.top :\n",
    "            datum = self.top.data\n",
    "            self.top = self.top.below\n",
    "            return datum\n",
    "        raise IndexError(\"Stack is empty\")\n",
    "\n",
    "#Nice to have methods\n",
    "    def peek(self):\n",
    "        if self.top:\n",
    "            return self.top.data\n",
    "        raise IndexError(\"Stack is empty\")\n",
    "\n",
    "    def is_empty(self):\n",
    "        return self.top == None\n",
    "\n",
    "    def size(self):\n",
    "        #Traversal recipe!\n",
    "        count = 0\n",
    "        if self.top:\n",
    "            current = self.top\n",
    "            while current:\n",
    "                count += 1\n",
    "                current = current.below\n",
    "        return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9540dc4-f267-42f2-aa6b-eb93af6e3950",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
